주수홍 선생님 : 파이썬, 라즈베리파이 실습
010-5008-2030
수업 시작 09:00
출석 체크 09:10

텔레그램 답장 ~17:30 18:00 까지는 할 수도 있지만
XXXXXXXXXX수업시간 외에는 XXXXXXXXXXXXXXX

대면, 원격 : 실습 화면 공유

선생님 필기 내용 필기 하지 않기
- 올려주실 것!
- 자기 생각 이런것만 필기!
집 가서 선생님것 보면서 블로그나 티스토리에 혼자 정리

-------------------개발환경 설정 : 프로그램 설치-----------------------------
텔레그램 설치 - 카톡같은 프로그램(독일)
- 수업할 때만 켜놓기
- 설치
https://telegram.org/?setln=ko
- PC용 -> 윈도우용

반디집
https://kr.bandisoft.com/bandizip/
- V 6.29 다운로드 -> 정보보내기X
- 파일 : 전체 선택
- 탐색기메뉴 : 폴더 바닥 선택할 때 명령 창 열기 체크

<visual studio>
1. 설치
개발 정보 : 구글링 하기(네이버X)
- 검색 : vscode - visual studio -> MS사의 개발툴
https://code.visualstudio.com/
- 윈도우 64 stable 다운로드
2. 한글화
-설치 후 : 맨 아래 테트리스모양 -> korean 검색 -> Korean Language Pack for VSC > Install > Restart
3. 확장 설치
- 맨 아래 테트리스모양 -> python 검색
-> 1, 2, 3번째 것 설치 : Python , Python for VSCode, Extension pack 설치

<테스트하기> - 디렉토리 만들기
위치 : 
C:\Users\ADMIN\Documents\Python

VSCode에서 탐색기 > 폴더 열기 > 문서 > Python > 폴더 만들기 210209_001 > 파일만들기 spring.py
다운로드 > https://www.python.org/downloads/ > Download Python 3.9.1 > 설치 파일 뜸 > 
Add Python 3.9 to PATH 체크 후 Customize installaion 선택 > 전체 선택되어있는 상태에서 Next > 
경로 변경 : C:\Python\Python39 & Precompile standard library 체크 > Install > Close
------------------------------------------개발환경 설정 끝---------------------------------------------

---이후는 10:27 메세지 보면서 따라하기---
print('지옥으로 키티') #''도 되고, ""로 해도 됨

' '와 " "가 동일
자바보다 편함

★외우기★
탐색기 : [윈도우키] + [e]
C:\Users\ADMIN\Documents\Python\210209_001
<도스창>
우클릭 : 명령창 열기 -> python + [spacebar] + [tab] : spring.py 가 자동으로 입력됨 -> + Eneter
VSCode 결과 나옴
- VSCode에서 Ctrl + F5누르는 것이 'spring.py 가 자동으로 입력됨' 이것과 동일

복사한 텍스트를 cmd 창에서 마우스 클릭하면 붙여넣기 됨
복사할 때도 cmd창에서 해당 내용 블록지정 -> 우클릭 : 복사하기 됨

notepad test.java > 예 > 메모장이 뜨고 이름은 test.java가 됨
메모장에

class test {
  public static void main(String args[]) {
    System.out.println("지옥으로 키티");
  }
}

입력 -> 저장하고 닫으면 C:\Users\ADMIN\Documents\Python\210209_001에 test.java 파일 생성됨

cmd창에서 javac하고 Enter : 뭔가 막 주르르륵 떠야 정상
안뜨고 'javac'은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는 배치 파일이 아닙니다. 라고 뜬다면

명령어 외워야 함!!!
cls : 창 클리어
dir : 파일 목록 볼 수 있음
- spring.py도 보이고 test.java도 보임
set : 환경변수들이 보임
- Path= 경로
-> 나는 Path=C:\Program Files\Java\jdk1.8.0_202\bin; 로 되어있음 위에서 'javac'은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는 배치 파일이 아닙니다. 라고
뜬 사람은 이게 안되어있는 것

파이썬 관련도 있음
C:\Python\Python39\Scripts\;
C:\Python\Python39\; 

탐색기 C:\Windows > notepade.exe : 메모장
explorer.exe : 탐색기
- 우리가 메모장 아이콘 등을 더블클릭해서 실행시키는 것 -> 실제로는 더블클릭을 해서 열리는 게 아니고 윈도우가 우리 눈에 보이지 않게
notepade를 친 것

exe : excute(실행하다)의 약자 실행파일
성 : 주 -> 주씨 핏줄을 타고 났다 : 분류 기준
이름 : 수홍
파일 이름 : 아이유.mp3 -> 노래를 저장하는 파일
                 이름.확장자    -> 통틀어서 파일이름이라고 함
 	     이름.hwp : 한글 워드 프로세스의 약자
                      .doc : document -> MS워드에서 사용
	          .mp4 : 영상
-> 파일도 뒷 부분을 보고 무슨 파일인지 속성을 파악 한다

보기 -> 옵션 -> 보기 -> 알려진 파일 형식의 파일 확장명 숨기기(체크/해체)
- 체크 되어있으면 확장자 빼고 이름만 보여줌!
- 체크 해제 : 확장자까지 전부 보여주는데 이름을 전체로 변경해버리면 확장자가 지워져서 제대로 실행이 되지 않음

도스창에서 'notepad' 이런식으로 치면 .exe가 붙었다고 가정!
notepad.exe 라고 쳐도 됨

python을 치면 python.exe가 실행됨
python spring.py -> 파이썬이 spring.py를 실행시켜달라

javac 오류
- [윈도우키] + [Break] : 시스템 뜸 | 아니면 탐색기 -> 내pc -> 속성
> 고급 시스템 설정 > 환경 변수 > 시스템 변수에 JAVA_HOME이 없을 것

나는 JAVA_HOME 있음 C:\Program Files\Java\jdk1.8.0_202 -> 자바가 설치된 디렉토리 위치
PATH도 %JAVA_HOME%\bin;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\oraclexe\app\oracle\product\11.2.0\server\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;%SYSTEMROOT%\System32\OpenSSH\;
-> 앞, 뒤 % % -> 그 전의 걸 불러온다 -> JAVA_HOME의 C:\Program Files\Java\jdk1.8.0_202 이걸 가지고 옴
javac : java compiler 약자 -> 번역기 : 우리가 적은걸 jvm이 해설할 수 있도록 번역
- 우리가 자바 언어로 적은 것( 그저 Text 일 뿐 : 휴먼 기반) -------컴파일러(:javac가 번역)---------> 2진수(컴퓨터) : 5V 1      0V 0
- 컴파일은 언제 하는가? 실행시킬 때! -> class 파일로 바꿔 줌, 오타가 있거나 하면 에러나고 ..

; 를 기준으로 엔터쳐서 분리해보기
%JAVA_HOME%\bin;
C:\Program Files (x86)\Common Files\Oracle\Java\javapath;
C:\oraclexe\app\oracle\product\11.2.0\server\bin;
%SystemRoot%\system32;%SystemRoot%;
%SystemRoot%\System32\Wbem;
%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;
%SYSTEMROOT%\System32\OpenSSH\;

여기서 %JAVA_HOME%\bin 이것만 탐색기창에 쳐보기
- 해당 경로로 이동

C:\Users\ADMIN\Documents\Python\210209_001 에서 우측 클릭 > 명령 창 열기 >
dos창에서 javac t 적고 [tab] 누르면 javac test.java -> 엔터 치면 : test.class 파일이 만들어진다 : 컴파일
-> 에러나면 아까 만들었던 test.java를 ANSI로 저장 후 다시 해보기!

<jvm에서 실행>
java test 엔터 -> 지옥으로 키티가 출력됨

- 이클립스에서 실행 버튼 -> javac test.java와 java test를 동시에 해주는 것(컴파일과 실행 동시에)

<컴파일>
자바 파일 -----------javac(컴파일러)-----------> 클래스 파일로 바뀐다     : 파일 -> 하드디스크에 존재

<실행>
우리는 실행을 해야 함 : CPU Memory에서!
class 파일 ---------------java(JVM)-------------> 실행

Java 파일 ----------------이클립스---------------------> 실행
                        javac             java     : 알아서 해주니까 우리가 볼 때는, java 파일이 바로 실행되는 걸로 보임

JDK -> 안에 JRE(자바 실행 환경) + Compiler 같이 패키지로 있음
                JRE -> JVM(자바가상머신) : JRE를 설치했으면 JVM이 같이 설치된 것
        아까 도스 창에서 'java'라고 쳐서 명령           

JRE : Java Runtime Environment -> 자바가 실행되는 환경
            실행시간 환경

cpu 제조사가 다르면 기계어도 다르다
java 언어로 작성 -> 0101 .. 로 변환 -> cpu에 전달
                         ㄴ> 기계어, 어셈블리어(기계어보다 간단)
                         -> cpu를 디테일하게 제어 가능 -> cpu 구조를 알아야 함

java를 배우면 cpu 구조를 몰라도 cpu를 제어 가능(기계어, 어셈블리어 몰라도)

<JAVA>
   .java -> .class -> cpu
소스파일  클래스파일
<C>
C -> exe -> cpu

중간 단계를 생략할 수 없을까? ----> 파이썬 탄생 : 컴파일X, 실행파일X
-> 중간 단계가 아예 사라진 건 아니고 내장되어 있는 것
.py -> cpu

Java : 소스 작성 -> 컴파일 -> 실행
Python : 소스작성 ----------> 실행+컴파일
일의 양은 같다.
-> 파이썬은 만들기는 편하지만 속도가 떨어진다
why? 실행 할 때마다 컴파일 해야 함
자바 같은 경우 컴파일을 1번 해놓으면 실행만 하면 됨


Number.py
a = 123
a = a + 1 #124
print(type(a)) #a의 자료형 출력 -> <class 'int'>
print(a)
a = a + 3.14 #127.14 / 윗부분 까지는 정수형, 여기서부터 실수형
print(type(a)) # <class 'float'>
print(a)
a = '지옥으로 키티' # 윗부분 까지는 실수형, 여기서부터 문자열
print(type(a)) # <class 'str'> -> 문자열 타입
print(a)

#a에 입력받기
# a = input()     #안녕    333    333 222
# print(type(a))  #str     str     str   
# print(a)        #안녕    333    333 222    

#a에 입력받기
a = int(input())#333  -> 입력받은 것을 int형으로
print(type(a))  #int
print(a)        #333

sample_if.py
Number = input('숫자를 입력하세요 : ') #문자로 입력됨
Number = int(Number) #입력받은 문자를 숫자형으로 바꿔줌
if 50 > Number : #if문 - 50보다 Number가 작으면
    print('입력한 숫자는 50보다 작습니다.') #반드시 탭 키로 띄워야 if의 하부명령이라는 것을 인지함
else :
    print('입력한 숫자는 50보다 큽니다.') #50입력 시 -> 입력한 숫자는 50보다 작습니다.

sample_if2.py

#숫자 1개를 입력 받아
#4의 배수인지 확인하는 코드를 작성하시오

Number = input('숫자를 입력하세요 : ')
Number = int(Number)

print('입력한 숫자는 4의 배수', end ='')
if Number%4 != 0 or Number == 0 : # 숫자를 4로 나눈 나머지가 0이 아니면
    print('가 아닙니다')
else :
    print('입니다')

if Number%4 == 0 and Number != 0 :
    print('입력한 숫자는 4의 배수입니다.')
else :
    print('입력한 숫자는 4의 배수가 아닙니다.')


sample_if3.py

Number = input('속도를 입력하세요 : ')

Number = int(Number)

if 80 < Number :
    print('고속 주행입니다')
elif 60 < Number :
    print('일반 주행입니다')
else :
    print('저속 주행입니다')


switch case 문은 없다

sample_if4.py
#점수 1개를 입력 받아 학점을 출력하시오
#90점 이상은 A
#80점 이상은 B
#70점 이상은 C
#60점 이상은 D
#나머지는 F

Score = input('점수를 입력하세요 : ')
Score = int(Score)

print('학점은', end = ' ')
if 90 <= Score :
    print('A 입니다')
elif 80 <= Score :
    print('B 입니다')
elif 70 <= Score :
    print('C 입니다')
elif 60 <= Score :
    print('D 입니다')
else :
    print('F 입니다')


sample_for1.py
for Number in range(0, 5) : #변수 선언을 여기에서 바로 함, range(시작, 끝) -> Number가 5보다 작을 때까지 증가한다 -> 기본으로 1씩 증가
    print(Number) #0 1 2 3 4
for Number in range(0, 50, 10) : #0~49 즉, 50보다 작을 때까지 도는데 10씩 증가함
    print(Number) #0 10 20 30 40
for Number in range(0, -5, -1) :
    print(Number) #0 -1 -2 -3 -4

p.96 책 두번째 예제
sample_for2.py

#for문을 이용하여 1에서 10까지 합을 구하시오.
sum = 0
for i in range(1, 11, 1) : #초기값은 1, 증감값은 1, 조건값 11로 for문 선언
    sum += i    #i변수 값을 sum 변수에 더함
print("sum : %d" % sum) #1~10까지의 합을 출력 -> sum : 55
print("--------------")

#for문을 이용하여 1에서 10까지 식과 합을 구하시오.
sum = 0 #sum 변수를 0으로 초기화
for j in range(1, 11, 1) :
    if j < 10 : #j가 10보다 작은 조건으로 if문 선언
        print("%d + " % j, end = "")
    elif j == 10 : #j가 10인 조건으로 if문 선언
        print("%d = " % j, end = "")
    sum += j
print("%d" % sum) #1~10까지의 합을 출력  55



=========== 위가 수업 내용!! ===============
%없이 적어도 똑같이 나옴

#for문을 이용하여 1에서 10까지 합을 구하시오.
sum = 0
for i in range(1, 11, 1) :
    sum += i    #i변수 값을 sum 변수에 더함
print("sum : " + str(sum))
print("--------------")

#for문을 이용하여 1에서 10까지 식과 합을 구하시오.
sum = 0 #sum 변수를 0으로 초기화
for j in range(1, 11, 1) :
    if j < 10 : #j가 10보다 작은 조건으로 if문 선언
        print(str(j) + " + ", end = "")
    elif j == 10 : #j가 10인 조건으로 if문 선언
        print(str(j) + " = ", end = "")
    sum += j
print(sum) #1~10까지의 합을 출력  55




sample_list1.py
#변수 한꺼번에 선언 -> 변수를 한꺼번에 초기화하기 쉽다
a, b, c, d = 100, 200, 300, 400

print(a) #100
print(b) #200
print(c) #300
print(d) #400

a, b, c, d = 100, 200, 300 이렇게만 해주면 에러
-> 변수는 네개인데 선언은 3개만 해줬기 때문


sample_list2.py
#list
array = [100, 200, 300, 400]

print(array[0]) #100
print(array[1]) #200
print(array[2]) #300
print(array[3]) #400

print("=============================")

for i in array : #array에서 하나씩 빼서 넣어줌 -> 결과는 위와 동일
    print(i)

# 100
# 200
# 300
# 400


sample_list3.py

#가변 배열 -> 배열이 늘어남
array = []
array.append(101) #append : 추가
array.append(202) 
array.append(303) 
array.append(404) 

for i in array :
    print(i)

print("=============remove 후===============")

array.remove(202) #배열에서 202 제거
for i in array :
    print(i)


중단점 : break point -> 숫자 옆 클릭 시 빨간 점 생김
bug(버그) : 벌레/문제가 발생한 코드
Debug(디버그) : 문제를 제거하는 행위
Debugging(디버깅) : 디버그를 하고 있는 혹은 할 행위
Debugger(디버거) : 디버그(를 지원하는) 전용 프로그램

중단점 찍고 -> 왼쪽 네번째 벌레 모양 -> 실행 및 디버그 -> Python Files -> 디버그 모드 : 전체 실행 순서(과정) 알 수 있음
디버깅 작업 : 이런식으로 확인하는 작업
- 단계 정보(F11) 클릭 또는 [F11] 누르면
- 빨간 점 : 실행 됐다
- 노란 테두리 : 이걸 실행될 예정이다
-> 만약 5번 라인 앞에 중단점을 찍고 디버그 모드를 켜면 그 앞까지는 수행하고
중단점 찍은 자리부터 디버그 할 수 있도록 1~4라인 수행 후 5번에서 중단하고 기다림

이클립스
원하는 곳에서 Run > Toggle Breakpoint

----------------------------------------------------------------------------------------

영화 이미테이션 게임 보기

[윈도우] + [d] : 모든 창 최소화 -> 바탕화면 보임 -> 한 번 더 누르면
모든 화면 다시 띄워 줌
----------------------------------------------------------------------------------------
책 IoT 사물인터넷을 위한 라즈베리파이 4 정석
- 라즈베리파이 : 장치, 조그만 컴퓨터

----------------------------------------------------------------------------------------

Chapter3. 파이썬 기초 배우기부터 시작할 것 (p.82~)


----------------------------------------------------------------------------------------

2/18 15:00~ 라즈베리파이 시작 -> 장비 지급

---------------------------------------------------------------------------------
회사에서 필요한 프로그램 - 회사pc에 설치 전에 하나하나 다 물어보기 : 가정에서만 무료, 상업적 이용 유료
ex) 알집 등.....

public static void main(String args[])에서 args가 arguments


----------------------------------------------------------------------------------
집에서 할 것 : JAVA_HOME, path 이런것들 설정하고 javac 되는지, VSCode 다운로드 등



----------------------------------------------------------------------------------

2/15 수업
<파이썬>
자바와 비슷한 점이 많음

컴퓨터 : <HW>

전자회로

반도체 : semi(반) / conductor(도체) - 자연상으로는 존재하지 않음
- 지우개 : 부도체
- 구리 : 도체

 -   +   
[  ][  ] : -에서 +로 전기가 흐름
반도체 : +, - 를 반대로 해주면 전기가 흐르지 않음 -> 다이오드

  +  -  +
-[  ][  ][  ]-
      |
트랜지스터 : 다리가 세 개
-> 다이오드 1.5개로 트랜지스터를 만듦 : 전자적 스위치 역할(전기가 안흐르는데 중간을 +해주면 흐른다..?)
NPN, PNP : 이런 형태로도 만든다

진공관 : 크기가 획기적으로 작아짐
┌──┐
 |   □ │ : 다리 세 개 - 화학물질이므로 보호를 받아야 함 -> 커버를 씌움
└  ||| ┘  : 트랜지스터

집적 회로(IC, Integrated Circuit) : 안에 트랜지스터가 많이 들어있음
- 얼마나 많이 들어가있느냐에 따라 등급으로 분류 : ULSI(Ultra..), VLSI(초고밀도 집적회로), IC(직접회로), LSI(고밀도 집적회로)

[TR] [TR] [TR] : TR을 3~4개 합하면 AND Gate, OR Gate 등 논리 회로를 만들 수 있다.(논리연산, Logic)
T & T -> True
T & F -> False

반도체 다이오드가 모여서(1.5개) -> TR(3개) -> Gate --> 1bit 가산기(adder, 덧셈기) 64개 -> 64bit 덧셈기(뺄셈기 : 보수회로를 만들어서 더해버림 -> 뺄셈) -> *, /는 더 복잡 : 4칙연산(산술연산, Arrithmatic)
                                                                 --> 1bit 메모리를 만들 수 있다 -> 8개 : 1byte -> 1024개 : 1KB -> 1024 : 1 -> 1024 : 1GB   ==> 이걸 잘 하는 회사가 삼성(좁은 공간에 많이 넣음 & 제조 기술) -> cpu와는 다른 기술.. 서로 함부로 손 대지 못함
컴퓨터 : 64bit

논리, 산술연산 ==> ALU(산술, 논리 유닛)

<CPU의 3대 구성요소>
1. ALU : 삼성이 잘 못 만듦 -> ARM(CPU 설계 기술을 파는 회사)이라는 회사에서 사와서 삼성 CPU를 내놓음
- 순수하게 CPU를 만들 수 있는 회사 : Intel vs 'AMD'(데스크탑 PC용 CPU), ARM(삼성, 아이폰 핸드폰용 CPU.. 모바일은 99%가 ARM)
--> CPU 주파수 높이기 힘듦 -> 한개 더 넣어서 -> Dual Core ... -> 쿼드코어  : Intel
- ARM Holdings에서 개발한 CPU 아키텍처 : 삼성, 퀄컴, 애플 등.. 모바일 CPU -> 일론머스크가 자체 cpu를 만들겠다고 하고있지만..
- ARM : 저전력 시스템 최강자 -> 얇은 핸드폰 속 배터리(얇고 넓게 퍼져있음)
cf) Intel : 전기가 충분할 때 -> PC, 노트북의 대용량 배터리

2. CU

3. Register


<SW>
 [HW] + [SW] --> 컴퓨터(PC, Personal Computer)
 SSD      OS : Operating System(운영체제)
-> OS : HW 부품을 하나하나 컨트롤(예전에는 칩에 있었음 - FirmWare라고 불렀음 -> 점점 커짐, 여기저기에 있어야 하고 -> 펌웨어를 관리하는 소프트웨어 필요 -> 이 칩을 운영하는 체제 : OS, 운영체제라고 부르자)

디스크, CD -> compact disk

디스켓 : 5.25, 3.5(내가 아는 디스켓!) -> FDD(Floppy) : 플라스틱 -> A, B 드라이브

HDD : Hard Disk Drive - 금속 -> C 드라이브

Disk + OS = DOS -> MS-DOS : 마이크로 소프트가 가장 유명
모든 OS를 통틀어서 보는 관점에서는 DOS 'shell'이라고 함

DOS : 글자 형태의 명령어 -> GUI형태로 진화하면서 Windows로
Unix라는 운영체제를 베낀 것 -> XWindows 프로젝트 -> 빌게이츠, 잡스

자연과학에서 새로 만들어 놓은 것(과학기술)
-> 공학기술 : 기존의 것을 응용하는 응용과학

HW가 밑에서 받쳐주어야 SW를 설치할 수 있음
[    App    ] : Application(오락같은 응용프로그램) -> OS를 기반으로 실행되는 프로그램(운영체제를 필요로하는 프로그램)
      ↑
[    SW     ] : OS(windows..)
      ↑
[ Firmware ] : 드라이버 - 칩 하나, 하나를 컨트롤 -> HW에 접근
      ↑
[    HW     ] : 마우스, 모니터 등을 연결하면 드라이버 설치를 해야 OS가 접근 가능
cf) 지구(HW) -> OS(대기권) -> App(사람)

[오락] -> 윈도우용으로 출시된 오락은 Linux, MAC에서 실행 불가능 -> Linux, MAC용으로 변환해야 함
  ↑
[OS]                 [OS]             [OS]
(windows)        (Linux)           (MAC)
--> 각각의 개발자를 모두 고용해야 함 --> 비용 증가
--> 이런걸 해소하기 위해 나온 언어 : 자바

- 자바 : 
[오락A]                      [오락A] : JVM만 설치하면 오락A를 그대로 들고 와도 작동됨
  ↑                            ↑
[JVM] : OS + HW          [JVM] : 운영체제X, 가상머신 => '플랫폼'이라고 함
  ↑                            ↑
[OS]                          [OS]
Windows                    MAC
- JVM이라는 플랫폼이 설치되어 있는 컴퓨터라면 OS를 따지지 않고 오락A를 실행할 수 있다.
-> 자바 오락만 개발할 수 있는 기술자 3명만 있으면 어떤 운영체제라도 다 팔 수 있다.
-> JVM을 탑재시켜서 팔면 유료 -> 무료로 만든 것 : 달빅 가상머신 -> 안드로이드
달빅도 OS가 있어야 함(원래는 OS가 Linux였음)
무료 OS : Linux -> iptime..

         ┌ ~~~.py
   [SW] |  파이썬    <- JVM과 같은 플랫폼 역할(파이썬만 설치되어 있으면 ~~.py를 실행할 수 있다)
         └  OS
            [HW]

C언어 : Windows에서 개발하면 Windows에서만 사용 가능  -> 컴파일러로 번역해서 MAC에서 사용 가능.. 운영체제가 다르면 다 따로 따로..
-> 플랫폼 기술을 사용하지 않기 때문

플랫폼 존재 -> 응용/개발 용이, 속도 느림 : 파이썬, 자바 -> 아무 운영체제에서나 가능
플랫폼 X -> 속도↑ : C언어
--> 용도가 다름(많은 사람을 이동시킬 수 있는 버스와 좁은 곳을 다닐 수 있는 오토바이처럼)
--> 상황에 맞는 언어를 사용하면 됨

자바와 파이썬은 비슷하나 파이썬이 훨씬 문법이 간단, 편리하다 -> 인간과 가깝다
ex) 자바
int a = 100;
--> 컴파일 할 때 --> 파이썬보다 속도 빠름

ex) 파이썬
a = 100
--> 실행할 때, int를 부여. 소스 그대로 실행 -> 유연, 수리하기 좋다, 파이썬보다 속도가 느림

기계어 - 어셈블리어 - C - 자바 - 파이썬
 CPU                                    인간
불편<----------------------------> 편리
제약 거의X                    중간    많음
                                           - 제약 줄이기 위한 방법 있음! 라즈베리파이 등...

빠르고 간단 : 파이썬
화면 띄우는 등 : 자바
핸드폰 등에 최적화 : 기계어

자바
--------------------------------------------
int[] array = new int[] {10, 20, 30, 40};

for (var Temp : array) { //array에서 10, 20, 30, 40을 하나씩 들고옴 -> var Temp는 컴파일할 때, int Temp = 10; .... 으로 바뀜
	System.out.println(Temp);
}
--------------------------------------------
10
20
30
40

-> array 참조변수
[0] 10 
[1] 20
[2] 30
[3] 40
-> int형 배열 객체
-> 객체 타입의 Temp라는 변수
int Temp = 10;
int Temp = 20;
int Temp = 30;
int Temp = 40;


파이썬에서는 list
array = [10, 20, 30, 40]

print(array[0]) #10 -> 사용할 때는 배열처럼 사용
print(array[1]) #20
print(array[2]) #30
print(array[3]) #40 -> 노가다

for i in array : #array에서 하나씩 빼서 임시데이터에 넣어줌 -> 결과는 위와 동일
    print(i) # -> 자동

-> for each문, 향상된 for문


자바 : for(var i : array)
= 파이썬 : for i in array -> 자료형이 없으므로
-> 둘 다 array에서 순서대로 하나씩 끄집어내서 i에 넣어줌

var는 10버전부터 가능하기 때문에 https://ideone.com에서 Test해볼 수 있음


자바 : javac라는 걸로 한 번 컴파일 해야 함
javac -> java compiler의 약자
java spring -> jvm이 spring을 실행시켜줌
<이클립스>
컴파일 : jdk가 해줌
이클립스 : 소스 편집, 컴파일, 실행

var : 자바 컴파일러 버전이 낮으면 사용X
var -> 타입에 연연하지 않고 프로그래밍을 하려고 나온 것
var Temp = 100; -> 자바가 자동으로 Temp를 int형으로


자바는 파일과 클래스명이 동일해야 하지만, 파이썬은 그렇지않음


Shift + 바탕화면에서 마우스 오른쪽 버튼 -> 명령 창 열기(Admin)
파이썬에서 게임 만드는 라이브러리
python -m pip install --upgrade pip
pip install pygame

이미 설치됐다는 메세지 2개 뜨면 OK
닫고 VSCode로 가기
폴더 : Game 안에 001 만들고 파일 Window.py 만들기


---------------------------------------------------------------
파이썬 ~ 2/18(목) 5교시
아두이노 : C언어로 진행(간단한 언어는 자바와 흡사) - 2/18(목) 6교시 ~ 2/23(화) 4교시 (3일 정도)  -> 참고 도서 : '모두의 C언어'(원하면 알아서)
- 두 개의 보드
- 가격 저렴, 간단
라즈베리파이 : 파이썬 + 리눅스 명령어 - 2/23(화) 5교시 ~ 3/4(목)
- 아두이노보다 성능이 좋다, 센서 공유
- 메트로 오락기 만들 수 있음
--> 장비는 다시 반납해야 함

2/18(목)~19(금) 출석하기!

영화 매트릭스1 보기
-------------------------------------------------------------------
2/16(화)
pip 파이썬
- 패키지 : 파이썬에 추가적인 기능을 더 붙여 확장된 파이썬의 기능 사용

python -m pip install --upgrade pip  : 새 버전으로 업데이트
pip install pygame : pygame 설치

import pygame 하면 그 기능 사용 가능

자바 : return 그냥 종료라면
exit는 생성하는 모든 프로그램 닫아버림! -> 사용 시 유의


펌웨어 업그레이드는 꼭 하는 것이 좋다


이미지 파일 실행 : C:\Users\rnjsq\Documents\Python>  
위치에서 실행하므로 사용할 이미지 파일을 이 위치에 넣어주어야 함
(현재 작업하고 있는 Game\001 디렉터리에 넣으면 안됨)

그러나 게임용 이미지를 따로 모아놓자!
image 디렉토리 만들고 그 안에 넣기

좌표
 0 1 2 3 .. 
0 __________________x
1 |
2 |
3 |
.. |
y


우리가 최종적으로 만들 것 : 소코반(일본), 푸시푸시
프로그램 시 화면에 보이는 그래픽은 우리가 관여할 게 아님 - 우리는 코드나 제대로 짜면 됨
IT쪽에 오락 만들러 많이 오는데, 그림, 노래 등 멀티미디어는 누가...?
-> 그림판으로 졸라맨 같은거 만듦(가로, 세로 60정도로 한 후 확대해서 그림 그림ㅋㅋㅋㅋㅋㅋ)

그림은 image 디렉터리에 저장
가로, 세로 60짜리 그림 총 4개 준비하기
정면, 오른쪽 보는 애, 왼쪽 보는 애, 뒷모습

이름 Man / People / Human
F
L
R
B
.png

그림판에 붙이고 Ctrl + E 누르면 크기 조절 가능
가로, 세로 200 200 맞추고 그림 정중앙에 놓기 -> 그림이 네모에 꽉 차게 확대 -> ctrl + w 로 가로, 세로 비율을 조정 30% 해서 저장 -> 가로 세로 크기 60이 됨

<pygame 참고 사이트>
https://www.pygame.org/docs/ref/key.html?highlight=pygame%20key#module-pygame.key
https://www.pygame.org/docs/ref/pygame.html


polling 방식
ex) 로니가 새장에서 탈출을 하는지 내(cpu)가 1분 마다 쳐다보면서 확인함 -> cpu 부하 증가
ex) 슈팅 오락 같은 게임은 이런 방식이 좋다

event/interrupt/message 방식
ex) 경보 시스템 설치 : 로니가 탈출 하려고 새장 열면 신호가 울림 -> polling 방식 보다 cpu 부하 덜함 but 비용이 든다
ex) 우리가 지금 만드는 게임 같은 경우는 이 방식이 좋을 수 있다


공부 : 우리가 아무것도 없는 상태에서 이미지를 띄워보고.. 모르겠으면 컨닝해서 띄워보고 -> 다시 지우고 띄워보고... 하면서
소스 코드를 안 보고도 그림을 띄울 수 있을 때까지!!! -> 그렇게 되면 내 것이 된 것
- 예제를 안 보고 작성할 수 있을 때까지 반복해보기


★★Mapping★★
- 어떤 것은 벽이 되고, 어떤 것은 바닥이 될 것 : 벽은 원하는 곳에 배치 -> 바닥처럼 for문을 사용할 수는 없고..




----------------------------

메모장에서 [Alt] 누른 상태에서 오른쪽 숫자키에서 65를 누른 후 [Alt]키에서 손을 뗀다 -> A 입력됨
아스키(미국표준번호) : 영문자 중심

65 : A
66 : B

0~127 : 7bit -> 구버전 : 아스키 코드
0~255 : 8bit가 있어야 255까지 표현 가능 -> 확장 아스키 코드

0 : NULL
0~31 : 제어문자
32~255 : 표기 문자
32 : space bar
----> 확장 : 유니코드(영어는 기준이 되고, 영어 말고도 다른 언어), (아스키는 미국에 종속)
2byte : 0~65535 -> 영어 + 타 언어 구현

메모장에서 안쳐지는 것도 DOS 창에서 치면 다 나온다

나갈 마음이 있다면 라즈베리파이 때 배우는 Linux 수업은 배우고 나가기
- Linux는 혼자 공부하기 힘들다


유닉인력재단

--------------------------------------

소스 비교 프로그램
WinMerge
https://sourceforge.net/projects/winmerge/files/stable/2.16.10/WinMerge-2.16.10-Setup.exe/download?use_mirror=jaist

비교하고싶은 파일 오른쪽 버튼 -> winMerge 클릭 -> 두 번째에 찾아보기 해서 내가 작성한 코드 선택하고 확인 누르면
두 소스 코드의 차이를 보여줌! WoW


-------------------------------------
자바
static
